#!/bin/bash
# This is the template file for any of the objects in the game.
# All object code is contained within the object function. Upon the sourcing of the script, this function is initialized. When sourcing a script with an argument, the function is called with the argument. If the item is not added to the inventory, the function is uninitialized, as well as all outside variables in object script. Otherwise, the function remains initialized.
# When object is in inventory, user invokes object function directly, otherwise user sources object script to use object
# startMission executes all object scripts in inventory directory, without options, upon loading of game, in order to reinitialize all object functions of objects in inventory

# scriptInput contains argument user specifies when running script directly, which is passed to the object function
scriptInput=$1

# Object function, this must have the same name as objectName
function guard
{
	# Object variables
	# mainText should contain the text that appears when the object is first used
	local mainText="\"I've killed the guard, but looks like Boreas is going to try and stop me next.\""
	# If the object is notable and can be added to the journal, then journalText can contain either its own text or a subset of text grepped or gawked from mainText; otherwise, it contains an empty string
	local journalText=""
	# scriptPath contains the path of the script, found by the PWD variable; do not use variable when running function directly
	local scriptPath=$PWD
	# scriptName contains the name of the object script
	local scriptName="guard"
	# objectName contains the name of the object/object function, which matches what appears in the inventory. This should be a unique name, and is usually the same as scriptName, unless the name of the object in the inventory must be different from the name of its script
	local objectName="guard"
	
	option=$1
	case $option in
		"-a"|"-b")
			if [[ $WP == 20 ]]
			  then
				mv $mainDir/.objects/.contents/.guard1/* .
				breakObject "$objectName" "$scriptPath/$scriptName"
				printMainText "$mainText"
			else
				echo 75 > $playerDir/.hp
				mv $mainDir/.objects/.contents/.guard1/* .
				breakObject "$objectName" "$scriptPath/$scriptName"
				printMainText "$mainText"
			fi
			# Insert the commands associated with using the object here
			unsetObjFunction "$objectName"
			;;
		"-i")
			# If the object can be added to the inventory, uncomment addInventory, otherwise uncomment printErrorInventory
			#addInventory "$objectName" "$scriptPath/$scriptName"
			#printErrorInventory
			echo "\"Ouch, I don't know what I was thinking trying to put the guard in my bag.\""
			echo 50 > $playerDir/.hp
			unsetObjFunction "$objectName"
			;;
		"-n")
			# If the object is noteworthy, uncomment addJournalEntry, otherwise uncomment printErrorJournal
			#addJournalEntry "$journalText"
			#printErrorJournal
			echo "\"Ouch! Despite the rugged asthetics of the guard, I don't think it was a good idea to try and take notes on him.\""
                        echo 50 > $playerDir/.hp
			unsetObjFunction "$objectName"
			;;
		"--init")
			# This option is only run by startMission upon first run when initializing all object functions in inventory; dummy option that immediately quits case statement in order for script to initialize function without printing usage statement
	 		;;
		"--unset")
			# This option is used by cleanup() to unset the object function
			unsetObjFunction "$objectName" -f
			;;
		*)
			printObjectUsageMessage "$objectName"
			unsetObjFunction "$objectName"
			;;
		esac
	return
}

guard $scriptInput
unset scriptInput
